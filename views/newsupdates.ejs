<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">

    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="css/styles.css" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:400,700,300">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/material-design-iconic-font/2.1.2/css/material-design-iconic-font.min.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Epilogue:wght@400&family=Finger+Paint&display=swap">
    <style>
    .foot {
      position: fixed;
      bottom: 0;
      left: 0;
      width: 100%;
      background-color:   #9bc0e6; 
      color: black;
        padding-top: 10px;
      text-align: center;
    }
    </style>
    <title>Document</title>
</head>

<body style="background-image: url(./images/deep.png); background-size: cover;background-position: center; background-attachment: fixed;"></body>

    <div class="col-12" style="background-color: rgb(216, 217, 218);">
        <header class="d-flex flex-wrap justify-content-center  mx-3 py-3 mb-4 border-bottom">
          <a href="/" class="d-flex align-items-center mb-3 mb-md-0 me-md-auto link-body-emphasis text-decoration-none">
            <img src="images/eye.svg" height="40px">
            <span class="fs-4 ms-2"> Guardians Of Truth </span>
          </a>
          <ul class="nav nav-pills">
            <li class="nav-item"><a href="/" class="nav-link" aria-current="page">Home</a></li>
            <li class="nav-item"><a href="/imgver" class="nav-link ">Image Verification</a></li>
            <li class="nav-item"><a href="/fakenews" class="nav-link">Fake News Check</a></li>
            <li class="nav-item"><a href="/newsupdates" class="nav-link active"> News Updates </a></li>
            <li class="nav-item"><a href="/sign-in" class="nav-link"><svg xmlns="http://www.w3.org/2000/svg" width="30px" height="30px" fill="currentColor" class="bi bi-person-circle" viewBox="0 0 16 16">
                <path d="M11 6a3 3 0 1 1-6 0 3 3 0 0 1 6 0"></path>
                <path fill-rule="evenodd" d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8m8-7a7 7 0 0 0-5.468 11.37C3.242 11.226 4.805 10 8 10s4.757 1.225 5.468 2.37A7 7 0 0 0 8 1"></path>
              </svg>
            </a></li></a></li>
          </ul>
        </header>
      </div>














      <div class="container">
        <div class="chat-container">
          <div class="chat-message">
            <div class="bot-response">Welcome! Ready for the latest news updates?</div>
          </div>
          <form id="chat-form" class="user-input">
            <input type="text" id="user-input" placeholder="Type your message..." class="form-control">
            <button type="submit" class="btn btn-primary">Send</button>
          </form>
        </div>
      </div>
      








      
 
    </div>
    <footer class="foot">
        <p> Â© The Bloodline| All rights reserved.</p>
      </footer>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <script type="importmap">
      {
        "imports": {
          "@google/generative-ai": "https://esm.run/@google/generative-ai"
        }
      }
    </script>
    <script type="module">
      // JavaScript code for chatbot functionality
      import { GoogleGenerativeAI } from "@google/generative-ai";
  
      // Fetch your API_KEY
      const API_KEY = "AIzaSyCI4KIrl8mIKNGQpKJkl5N2E1fUHdMLCHc";
  
      // Access your API key (see "Set up your API key" above)
      const genAI = new GoogleGenerativeAI(API_KEY);
  
     // Function to handle user input and generate chatbot response
  async function handleUserInput(event) {
    event.preventDefault();
    const userInput = document.getElementById("user-input").value.trim();
  
    if (userInput !== "") {
      const chatContainer = document.querySelector(".chat-container");
      const userMessage = document.createElement("div");
      userMessage.classList.add("chat-message");
      userMessage.innerHTML = `<div>You: ${userInput}</div>`;
      chatContainer.appendChild(userMessage);
  
      // Generate response from the chatbot
      const model = genAI.getGenerativeModel({ model: "gemini-pro" });
      const result = await model.generateContent(userInput);
      const response = await result.response;
      const text = await response.text();
  
      // Format the bot's output
      const formattedText = formatOutput(text);
  
      const botMessage = document.createElement("div");
      botMessage.classList.add("chat-message");
      botMessage.innerHTML = `<div class="bot-response">Bot: ${formattedText}</div>`;
      chatContainer.appendChild(botMessage);
  
      // Clear the input field
      document.getElementById("user-input").value = "";
    }
  }
  
// Function to format the bot's output
function formatOutput(text) {
  // Split the text by "\n\n" to separate paragraphs
  const paragraphs = text.split("\n\n");

  // Create an array to store formatted paragraphs
  const formattedParagraphs = [];

  // Iterate through each paragraph and format it
  paragraphs.forEach(paragraph => {
    // Trim whitespace and remove empty strings
    const trimmedParagraph = paragraph.trim();
    if (trimmedParagraph !== "") {
      // Check if it's a heading or sub-heading
      if (trimmedParagraph.startsWith("Bot:") || trimmedParagraph.startsWith("Political:") || trimmedParagraph.startsWith("Economic:")) {
        // Format the heading in bold and larger size
        const formattedHeading = `<strong style="font-size: 1.2em;">${trimmedParagraph}</strong>`;
        // Add the formatted heading to the array
        formattedParagraphs.push(formattedHeading);
      } else {
        // Replace "*" with an empty string
        const formattedParagraph = trimmedParagraph.replace(/\*/g, "");
        // Add the formatted paragraph to the array
        formattedParagraphs.push(formattedParagraph);
      }
    }
  });

  // Join the formatted paragraphs with line breaks and an extra line between paragraphs
  const formattedText = formattedParagraphs.join('<br><br>');

  return formattedText;
}

  
  
  
      // Event listener for submitting user input
      document.getElementById("chat-form").addEventListener("submit", handleUserInput);
    </script>
</body>
</html>